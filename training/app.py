from fastapi import FastAPI, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from keras.layers import TFSMLayer
from tensorflow.keras.preprocessing import image
import numpy as np
import uvicorn
import io
from PIL import Image
import os  # üëà c·∫ßn ƒë·ªÉ l·∫•y bi·∫øn m√¥i tr∆∞·ªùng PORT

app = FastAPI()

# ‚úÖ Th√™m CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # üëà Cho ph√©p t·∫•t c·∫£ frontend (ho·∫∑c ch·ªâ "http://localhost:3000")
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚úÖ Load model b·∫±ng TFSMLayer (Keras 3)
model = TFSMLayer("./model.savedmodel", call_endpoint="serving_default")

# ‚ö†Ô∏è Thay b·∫±ng label th·∫≠t m√† b·∫°n train
labels = ["Ph·ªü", "B√°nh M√¨"]

@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    try:
        img = Image.open(io.BytesIO(await file.read())).convert("RGB")
        img = img.resize((224, 224))  # üëà ch·ªânh ƒë√∫ng input model Teachable Machine
        img_array = image.img_to_array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)

        preds = model(img_array)
        if isinstance(preds, dict):
            preds = list(preds.values())[0]
        preds = preds.numpy()[0]

        predicted_label = labels[np.argmax(preds)]
        confidence = float(np.max(preds))

        return {"label": predicted_label, "confidence": confidence}

    except Exception as e:
        import traceback
        traceback.print_exc()
        return {"error": str(e)}

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))  # ‚úÖ Render c·∫•p port qua bi·∫øn m√¥i tr∆∞·ªùng
    uvicorn.run(app, host="0.0.0.0", port=port)
